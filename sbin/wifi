#!/bin/sh
# SCRIPTS_DIR/sbin/wifi
# starts/stops wireless service	(clean up of original wireless_toggle script).

# TODO:
#	Sort out the 'init_modules' function (use pci detection, etc.)
#	check the nmcli (not nm-tool!) workings

log="${LOG-/dev/null}"

## souce library scripts	{{{1
[ -h "${0}" ] &&
    script_path="$(readlink -f "${0}")" ||
    script_path="${0}"
. "${script_path%/*}/../lib/send_message.sh"
. "${script_path%/*}/../lib/prog.sh"

## Global Variables	{{{1

### Library scripts variables	{{{2
notify_opts="--category=network --hint=string:desktop-entry:wicd-tray "
icon="wicd-gtk"

### Control variables	{{{2
verbose=false
force=false
timeout=3

### Command variables	{{{2
_rfkill="$(first_sys_cmd rfkill)"
_modprobe="$(first_sys_cmd modprobe)"
_pgrep="$(first_sys_cmd pgrep)"
_wifi="$(first_sys_cmd wicd NetworkManager)"
case "${_wifi##*/}" in
    "wicd")
	wifi_disconnect="$(command -v "wicd-cli") --wireless --disconnect"
	wifi_client="$(command -v "wicd-client")"
	;;
    "NetworkManager")
	wifi_disconnect="$(command -v "nmcli") nm wifi off"
	wifi_client="$(command -v "nm-applet")"
	;;
esac
wifi_initscript="/etc/init.d/${_wifi##*/}"

## Functions	{{{1

### Initialisation functions	{{{2

init_rf () {		# initiate and check rfkill variables
    rf_list="$(! ${_rfkill} list | sed -ne \
	'/[Ww]ifi\|[Ww]ireless/ { :top
	    p; n
	    /^\s/ b top
	    q1 }')" &&
	rf_control=true ||
	rf_control=false
    # check we have control
    echo "${rf_list}" | sed -ne "/[Hh]ard [Bb]locked.* yes/q1" ||
	die "Cannot control Wifi -" "blocked by hardware switch."
}

init_modules () {	# TODO: get possible wireless modules
    ${force} || [ -n "${wifi_modules}" ] ||
	wifi_modules="r8192e_pci ndiswrapper "
	#module_search_term="$(lspci | sed -e 
    wifi_mod_regex="$(echo ${wifi_modules} | sed 's/ \+/\\|/g')"
}

init_wifi () {
    init_rf
    init_modules
    # check we can use appropriate init script
    [ -x "${wifi_initscript}" ] ||
	die "Cannot control Wifi -" "${wifi_initscript} not available."
}

### Wifi functions		{{{2

wifi_status () {	# check based on controll program, rfkill, and modules
    ${_pgrep} -x ${_wifi##*/} >"${log}" &&	# wicd must be running
	{	# and we don't have rf control, or ...
	    ! ${rf_control} ||	# ... it can't be blocked
		echo "${rf_list}" | sed -ne "/[Ss]oft [Bb]locked.* yes/q1"
	} &&	# and must be at least 1 wifi module present
	! sed -ne "/${wifi_mod_regex}/q1" </proc/modules
}

wifi_stop () {
    # variables
    local dae=false mod=false
    while [ ${#} -gt 0 ]
    do
	case "${1}" in
	    '-d'|'--dae'|'--daemon')
		dae=true
		;;
	    '-m'|'--mod'|'--module')
		mod=true
		;;
	    '-a'|'--all')
		dae=true mod=true
		;;
	    *)
		send_message -w "Wifi Stop" "Invalid option: '${1}'"
		;;
	esac
	shift
    done
    # check its not already stopped
    ${force} || wifi_status || {
	send_message -w "Wifi already stopped."
	return 2
    }
    # stop active connections
    ${wifi_disconnect-true} >"${log}" 2>&1
    ${rf_control} && {
	# we have rf controll so soft block wifi
	${_rfkill} block wifi >"${log}" 2>&1
	init_rf		# check
	echo "${rf_list}" | sed -ne "/[Ss]oft [Bb]locked.* no/q1" && {
	    send_message -i "Wifi Stop -" "soft blocked Wifi"
	} || {
	    send_message -e "Wifi Stop Failed -" "could not soft block Wifi."
	    ${dae} || ${mod} || return 1
	}
    } 
    { ${dae} || ! ${rf_control}; } && {
	# If we don't have rf control first stop daemon
	${wifi_initscript} stop >"${log}" 2>&1 &&
	    send_message -i "Wifi Stop -" "${_wifi##*/} daemon stopped" ||
	    send_message -e "Wifi Stop -" "${_wifi##*/} failed to stop" ||
	# Check wicd has actually stopped
	local wifi_pid
	wifi_pid="$(${_pgrep} -x "${_wifi##*/}" 2>"${log}")" && {
	    sleep "${timeout}"
	    [ -d "/proc/${wifi_pid}" ] && {
		send_message -w "Wifi Stop -" "Trying to kill ${_wifi##*/}..."
		kill "${wifi_pid}" >"${log}" 2>&1
		sleep "${timeout}"
		[ -d "/proc/${wifi_pid}" ] &&
		    send_message -e "Kill ${_wifi##*/}" "Failed." ||
		    send_message -i "Kill ${_wifi##*/}" "Succeded."
	    }
	}
    }
    { ${mod} || ! ${rf_control}; } && {
	# If we don't have rf control then remove modules
	local module
	for module in ${wifi_modules} 
	do
	    ! sed -ne "/^${module}/q1" </proc/modules &&
		${_modprobe} -r ${module} >"${log}" 2>&1
	done
	# check
	sed -ne "/${wifi_mod_regex}/q1" </proc/modules && {
	    send_message -i "Wifi Stop -" "modulues removed"
	} || {
	    send_message -e "Wifi Stop Failed -" "modules could not be removed."
	    return 1
	}
    }
    send_message "Wifi Stopped."
}

wifi_start () {
    ${force} || ! wifi_status || {
	send_message -w "Wifi already started."
	return 2
    }
    ${rf_control} && {
	# we have rf control so soft unblock wifi
	${_rfkill} unblock wifi >"${log}" 2>&1
	init_rf		# check
	echo "${rf_list}" | sed -ne "/[Ss]oft [Bb]locked.* yes/q1" && {
	    send_message -i "Wifi unblocked."
	} || {
	    send_message -e "Wifi Start Failed -" "could not unblock Wifi."
	    return 1
	}
    }
    sed -ne "/${wifi_mod_regex}/q1" </proc/modules && {
	# no wifi module, so insert using /etc/conf.d/modules to find.
	. "/etc/conf.d/modules"
	local RELEASE="_$(uname -r | sed -e 's:[\.-]:_:g')"
	# concaternate modules_${release} variables, most specific first
	local release="${RELEASE}"
	local starting_mods=""
	while [ -n "${release}" ]
	do
	    eval "starting_mods=\"${starting_mods} \${modules${release}}\""
	    release="${release%_*}"
	done
	# extract the modules that load at startup from the wifi modules.
	local starting_wifi_mods="" wifi_mod
	for wifi_mod in ${wifi_modules}
	do
	    [ -z "${starting_mods##*${wifi_mod}*}" ] &&
		starting_wifi_mods="${starting_wifi_mods}${wifi_mod} "
	done
	# check wireless modules
	local mods_count=$(echo ${starting_wifi_mods} | wc -w)
	[ ${mods_count} -lt 1 ] &&
	    die "Wifi Start Failed -" "no available modules"
	local wifi_mod=${starting_wifi_mods%% *}
	[ ${mods_count} -gt 1 ] &&
	    send_message -w "Multiple modules available," \
		"loading the first: ${wifi_mod}"
	# concaternate modules_${wireless_mod}_${release} arguments
	local release="${RELEASE}"
	local mod_args=""
	while [ -n "${release}" ]
	do
	    eval "mod_args=\"${mod_args} \${modules_${wifi_mod}${release}}\""
	    release="${release%_*}"
	done
	# load module
	${_modprobe} ${wifi_mod} ${mod_args} >"${log}" 2>&1 ||
	    die "Wifi Start Failed -" "module couldn't be inserted"
    }
    # check if wicd daemon is running
    ${_pgrep} -x "${_wifi##*/}" >"${log}" 2>&1 ||
	${wifi_initscript} start >"${log}" 2>&1 &&
	    send_message -i "${_wifi##*/} Started..." ||
	    die "Wifi Start Failed -" "${_wifi##*/} could not start"
    # check if wicd client is running
    [ -n "${XAUTHORITY}" ] && {
	${_pgrep} -x ${wifi_client##*/} >"${log}" 2>&1 ||
	    sudo -bu ${USER} ${wifi_client-true} >"${log}" 2>&1
	${_pgrep} -x ${wifi_client##*/} >"${log}" 2>&1 ||
	    send_message -w "${wifi_client##*/} did not start"
    }
    send_message "Wifi Started"
}

## Process Arguments and Execute	{{{1

init_wifi
while [ 1 -gt 0 ]
do
    case "${1}" in
	"toggle")
	    send_message -i "Toggling Wifi..."
	    shift
	    if wifi_status
	    then
		wifi_stop "${@}"	# It's started, so stop
	    else
		wifi_start "${@}"	# It's stopped, so start
	    fi
	    ;;
	"start")
	    send_message -i "Starting Wifi..."
	    shift
	    wifi_start "${@}"
	    ;;
	"stop")
	    send_message -i "Stopping Wifi..."
	    shift
	    wifi_stop "${@}"
	    ;;
	"restart")
	    send_message -i "Restarting Wifi..."
	    shift
	    wifi_stop "${@}"
	    sleep ${timeout}
	    wifi_start "${@}"
	    ;;
	"status")
	    wifi_status &&
		send_message "Wifi Started" ||
		send_message "Wifi Stopped"
	    ;;
	"-v"|"--verbose")
	    verbose=true
	    shift && continue
	    ;;
	"-f"|"--force")
	    force=true
	    shift && continue
	    ;;
	"-d"|"--debug")
	    verbose=true
	    log="/dev/stderr"
	    shift && continue
	    ;;
	"h"|"-h"|"help"|"-help"|"--help")
	    echo "Usage: ${0} [opts] <action> [local-opts]"
	    echo
	    echo "Controls wifi using wicd and either "
	    echo "	rfkill or kernel modules."
	    echo
	    echo "OPTION"
	    echo "	-h --help"
	    echo "		prints this help message"
	    echo "	-v --verbose"
	    echo "		makes execution more verbose"
	    echo "	-f --force"
	    echo "		attempt to force <action>"
	    echo
	    echo "ACTION"
	    echo "	toggle  - toggles between states"
	    echo "	start   - starts all necessary sevices"
	    echo "	stop    - blocks wifi or removes module"
	    echo "		  -d --daemon	- stop daemon"
	    echo "		  -m --modules	- remove modules"
	    echo "		  -a --all	- stop everything"
	    echo "	restart - performs 'stop' then 'start'"
	    echo "		  (local-opts as stop)"
	    echo "	status  - shows a status message"
	    echo
	    exit 0
	    ;;
	*)
	    echo "Usage: ${0} [--help|--verbose] <toggle|start|stop|restart|status>" >&2
	    exit 1
	    ;;
    esac
    break
done

