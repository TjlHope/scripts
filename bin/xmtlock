#!/bin/sh
# SCRIPTS_DIR/sbin/xtlock
# Lock X displays, virtual terminals (not controlled by a multiplexer), and 
# multiplexers.
# TODO: screen support

## Variables	{{{1

log="${LOG-/dev/stdout}"	# allow overiding with envvar LOG

# source library scripts for program location and expression matching
[ -h "${0}" ] &&
    script_p="$(readlink -f "${0}")" ||
    script_p="${0}"
lib_d="${script_p%/*/*}/lib"
. "${lib_d}/prog.sh"
. "${lib_d}/expr.sh"

# commands need to be run as specific users
priv_cmd="sudo -bnu \${user}"	# also background them; fail rather than prompt

list_cmd="$(command -v 'ck-list-sessions')"

### [un]lock command variables	{{{2
# with necessary arguments

# command for locking the X server
x_cmd="${priv_cmd} $(first_cmd 'gnome-screensaver-command' \
    'xscreensaver-command' 'xlock' 'alock' 'slock')"
case "${x_cmd##*/}" in
    'gnome-screensaver-command')
	lock_x="${x_cmd} --lock"
	unlock_x="${x_cmd} --deactivate"
	;;
    'xscreensaver-command')
	lock_x="${x_cmd} -lock"
	unlock_x="${x_cmd} -deactivate"
	;;
    'xlock')
	lock_x="${x_cmd}"
	unlock_x="${x_cmd} -deactivate"
	;;
    *)	lock_x="${x_cmd}";;
esac
lock_x="${priv_cmd} $(first_cmd 'gnome-screensaver-command --lock' \
				'xscreensaver-command -lock' \
				'xlock' \
				'alock' \
				'slock')"
unlock_x="${priv_cmd} $(first_cmd 'gnome-screensaver-command --deactivate' \
				  'xscreensaver-command -deactivate' \
				  'xlock -deactivate' \
				  'true')"

# command for DPMS control
dpms_cmd="${priv_cmd} $(first_cmd 'xset')"
case "${dpms_cmd##*/}" in
    'xset')
	lock_dpms="${dpms_cmd} dpms force standby"
	unlock_dpms="${dpms_cmd} dpms force on"
	dpms_query="! ${dpms_cmd} q | sed -ne \
			'/^DPMS/{ :top; n
			    /^\s/ {
				/[Ee]nabled/ q1
				b top
			    }}'"
	;;
esac

# command for locking Virtual Terminals
vt_cmd="${priv_cmd} $(first_cmd 'vlock' 'busybox' 'away' 'lock')"
case "${vt_cmd##*/}" in
	'vlock')	lock_vt="${vt_cmd} -an";;
	'lock')		lock_vt="${vt_cmd} -npv";;
	#TODO: 'away')		lock_vt="${vt_cmd} ??";;
	'busybox')	lock_vt="${vt_cmd} vlock -an";;
esac
lock_vt="${priv_cmd} $(first_cmd 'vlock -an' 'lock -npv' \
				 'away' 'busybox vlock -an')"

# commands for locking Terminal Multiplexers	# FIXME: only tmux supported
mux_cmd="${priv_cmd} $(first_cmd 'tmux' 'screen')"
case "${mux_cmd##*/}" in
    'tmux')
	lock_mux="${mux_cmd} lock-server"
	list_mux="${mux_cmd} list-clients -F '#{client_tty}'"
	vt_mux_cmd="${mux_cmd} lock-client -t"
	;;
    'screen')		# TODO: screen lock??
	lock_mux="${mux_cmd} lock"
	;;
esac
# command to only lock Multiplexer clients connected to a Virtual Terminal
lock_vt_mux="for c in \$(${list_mux}); do [ \"\${c%tty*}\" != \"\${c}\" ] && ${vt_mux_cmd} \${c}; done"

## Sessions	{{{1

### Get sessions	{{{2
# '|' seperates fields, white space seperates sessions...

# X and VT sessions
[ -n "${list_cmd}" ] && {
    sessions="$(${list_cmd} | sed -ne \
	"/^Session[0-9]\+:$/ { N
	    s:^.*unix-user = '\(${rgx_id}\)'.*$:\1|:
	    N; N; N; N
	    s:\n.*active = \(${rgx_bool}\).*$:\1|:
	    N;N
	    s:\n.*x11-display = '${rgx_xdply}'\s*\n.*x11-display-device = '/dev/\(${rgx_term}\)':X|\1:
	    N
	    s:\n.*display-device = '/dev/\(${rgx_term}\)':V|\1:
	    s:\n.*$::
	    p}")"
} || { 
    # TODO: Do something if consolekit not available
    #		can't be bothered right now.
    tty_users="$(ps -e -o 'tty,user,cmd' | sed -ne \
	's:^\(tty[0-9]\)\+\s\+\(\w\+\)\s\+.*[-/]\([a-Z]\{,3\}sh\)\(\s.*\)\?$:\2|\1:p')"
    users="$(echo "$(/usr/bin/users) " | sed -e 's:\(\w\+\)\(.*\s\)\1\s:\1\2:g')"
    x="$(/usr/bin/pgrep '^X$')"
}

# MUX sessions
[ -n "${mux_cmd}" ] &&
    sessions="${sessions} $( \
	ps -C"${mux_cmd##*/}" -o"user=,pid=,tty=" | \
	sed -ne \
	    "s:^\s*\(${rgx_user}\)\s\+\(${rgx_id}\)\s\+\(${rgx_term}\)\s*$:\1|\2|M|\3:p"\
	)" 

### Process sessions	{{{2

for session in ${sessions}
do
    case "${session%|*}" in
	*X)				# X session?
	    [ "${session##*|${_true}|*}" = '' ] && {
		user="$(sed -n /etc/passwd -e \
		    "s/^\([^:]*\):[^:]*:${session%%|*}:.*/\1/p")"
		[ "${x_users#*${user}}" = "${x_users}" ] && {
		    x_users="${x_users} ${user}"
		    eval "${dpms_query}" &&	# X user has DPMS enabled?
			dpms_users="${dpms_users} ${user}"
		}
	    }
	    ;;
	*V)				# VT session (that's not muxed)?
	    m_tty="|M|${session##*|}"
	    [ "${sessions#*${m_tty}}" = "${sessions}" ] &&
		[ "${vt_users#*root}" = "${vt_users}" ] && {
		    [ -z "${session##*|${_true}|*}" ] ||
			[ -z "${vt_users}" ] || [ "${session%%|*}" = '0' ]
		} && {
		    user="$(sed -n /etc/passwd -e \
			"s/^\([^:]*\):[^:]*:${session%%|*}:.*/\1/p")"
		    vt_users="${user}"	# can't lock individually
		}
	    ;;
	*M)			# MUX session?
	    user="${session%%|*}"
	    [ "${mux_users#*${user}}" = "${mux_users}" ] &&
		mux_users="${mux_users} ${user}"
	    [ "${session##*|tty}" != "${session}" ] &&	# client a VT?
		[ "${vt_mux_users#*${user}}" = "${vt_mux_users}" ] &&
		vt_mux_users="${vt_mux_users} ${user}"
	    ;;
    esac
done

## Execution	{{{1

### Argument processing	{{{2

# defaults:
action="lock"
def_devs="x dpms vt_mux"

while [ ${#} -gt 0 ]
do
    case "${1}" in
	'-l'|'-lock'|'--lock'|'-activate'|'--activate')
	    action="lock"
	    ;;
	'-u'|'-unlock'|'--unlock'|'-deactivate'|'--deactivate')
	    action="unlock"
	    #def_devs="${def_devs} dpms"	# want dpms with unlock
	    ;;
	'x'|'dpms'|'vt_mux'|'mux'|'vt')
	    devs="${devs} ${1}"
	    ;;
	'all')
	    devs="x dpms mux vt"
	    ;;
	*)
	    echo "usage: ${0} [-u|-d] (all|x|dpms|vt_mux|mux|vt)" >&2
	    exit 1
	    ;;
    esac
    shift
done

### Iterate and Execute	{{{2

for dev in ${devs-${def_devs}}
do
    eval users="\$${dev}_users"
    for user in ${users}
    do
	eval "eval \${${action}_${dev}-true}" >/dev/null 2>&1 &&
	    echo "${dev} ${action}ed for ${user}" ||
	    echo "failed to ${action} ${dev} for ${user}"
    done
done

