#!/bin/sh
# vi: sw=4 sts=8 ts=8 et
set -eu
[ -z "${SH_OPTS-}" ] || set -"${SH_OPTS#-}"

: "${PING-}"            # ping
: "${PING_ONCE-}"       # ping -c1 / ping -n 1
: "${PING_FILTER-}"     # egrep -v time < 100ms
: "${CHECK_FILTER-}"    # no
: "${PING_FORMAT-}"     # awk -va="$a" '{print strftime("%c"),"\t",a,"\t",$0}'

msg() { printf '%s\n' "$@"; }
err() {
  # shellcheck disable=2039
  local s=$?; [ $s -gt 0 ] || s=1
  msg "$@" >&2
  return $s
}
die() { err "$@" || exit; }

yesno() {
    case "${1-}" in
        [Yy]|[Yy][Ee][Ss]|[Tt][Rr][Uu][Ee]|1)   true;;
        [Nn]|[Nn][Oo]|[Ff][Aa][Ll][Ss][Ee]|0)   false;;
        '')                                     return 2;;
        *)                                      return 3;;
    esac
}

if [ -z "${PING-}" ]
then
    if command -v ping.exe >/dev/null
    then
        PING="ping.exe -t"
    elif command -v ping >/dev/null
    then
        if version="$(ping -V 2>&1 | head -n1)"
        then
            case "$version" in
                *iputils*)  PING="ping -O";;
                *)          die "Don't know how to use:" "$version";;
            esac
        else
            die "Don't know how to use:" "$(command -v ping)"
        fi
    else
        die "Cannot find ping"
    fi
fi
eval "ping() { $PING \"\$@\"; }"

if [ -z "${PING_ONCE-}" ]
then
    case "$PING" in
        *"ping.exe"[$IFS]*)     PING_ONCE="$PING -n 1";;
        *)                      PING_ONCE="$PING -c1";;
    esac
fi
eval "ping_once() { $PING_ONCE \"\$@\"; }"

# shellcheck disable=2086
ping_once 127.0.0.1 >/dev/null ||
    die "Test ping to localhost failed:" \
        "$PING_ONCE 127.0.0.1"

if [ "${PING_FILTER+set}" != set ]
then
    if command -v egrep >/dev/null
    then        egrep="egrep"
    elif command -v grep >/dev/null
    then
        if echo two | grep -E 'one|two' >/dev/null 2>&1
        then    egrep="grep -E"
        elif echo two | grep -r 'one|two' >/dev/null 2>&1
        then    egrep="grep -r"
        else
            die "Cannot find grep extended regex optoin"
        fi
    else
        die "Cannot find 'grep' for ping filtering"
    fi
    if echo one | $egrep --line-buffered one >/dev/null 2>&1
    then        egrep="$egrep --line-buffered"
    fi
    # bake the var in
    PING_FILTER="$egrep -v 'time[<=][0-9]{,2}(\\.[0-9]+)? *ms'"
    unset egrep
elif [ -z "$PING_FILTER" ]
then
    PING_FILTER="cat"
    CHECK_FILTER=no
fi
eval "ping_filter() { $PING_FILTER; }"
if yesno "${CHECK_FILTER-yes}"
then
    [ "$(ping_once 127.0.0.1 | ping_filter | wc -l)" \
        -ne "$(ping_once 127.0.0.1 | wc -l)" ] ||
        die "Test ping filter failed:" \
            "\$($PING_ONCE 127.0.0.1 | $PING_FILTER | wc -l)" \
            "  = \$(PING_ONCE 127.0.0.1 | wc -l)"
fi

if [ "${PING_FORMAT+set}" != set ]
then
    # shellcheck disable=2016
    PING_FORMAT='awk -va="$1" '\''{
        print strftime("%FT%T%z"),"\t",a,"\t",$0;
        fflush();
    }'\'
elif [ -z "$PING_FORMAT" ]
then
    PING_FORMAT="cat"
fi
eval "ping_format() { $PING_FORMAT; }"
ping_once 127.0.0.1 | ping_format 127.0.0.1 >/dev/null ||
    die "Test ping format failed:" \
        "$PING_ONCE 127.0.0.1 | $PING_FORMAT"


# TODO --help, check args
[ $# -gt 0 ] || die "need address(es)"

pids=""
#trap 'kill -INT $pids' INT
for a in "$@"
do
    ( ping "$a" | ping_filter | ping_format "$a" ) &
    pids="$pids $!"
done
# shellcheck disable=2086
wait $pids
