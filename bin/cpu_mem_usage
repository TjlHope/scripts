#!/bin/sh
# SCRIPTS_DIR/bin/cpu_mem_usage
### Outputs the current cpu and memory usage figures.

# source library functions
[ -h "${0}" ] &&
    script_p="$(readlink -f "${0}")" ||
    script_p="${0}"
lib_d="${script_p%/*/*}/lib"
. "${lib_d}/percent_blocks.sh"
. "${lib_d}/check_type.sh"
. "${lib_d}/colour.sh"
. "${lib_d}/output.sh"

# Use $SHM_D (if defined) for storage, fallback of /tmp/$USER
shm_d="${SHM_D:-/tmp/${USER}}"
{
    [ -d "${shm_d}" ] || {
	[ -w "${shm_d%/*}" ] &&
	    mkdir "${smh_d}"
    }
} && 
    [ -w "${shm_d}" ] ||
    die "Cannot access shared memory directory: ${shm_d}."

cpu_usage () {
    # Function to get current cpu usage, stores the current, and ${1:-inf} 
    # previous values in ${SHM_D}/cpu; and outputs the current, and ${1:-0} 
    # from the file each call.
    ## Variables
    local cpu v a t p _a _t _p fl="${shm_d}/cpu"
    ## Calculate current
    # get the total cpu line from /proc/stat: "IDLE|T1 T2 T3 IDLE T5 ...  TN"
    cpu="$(sed -n /proc/stat -e \
	's/^cpu\s\+\(\([0-9]\+\s\+\)\{3\}\)\([0-9]\+\)\(.*\)$/\3|\1\3\4/p')"
    # get the previous values (defaults if necessary)
    [ -f "${fl}" ] &&
	read _a _t _p < "${fl}" ||
	echo "0 0 0" > "${fl}"
    # sum all the values after the bar to get the total
    for v in ${cpu#*|}
    do
	t=$(( ${t-0} + ${v}))			# total time (cs)
    done
    a=$(( ${t} - ${cpu%%|*} ))			# active time (cs)
    # percent use
    p=$(( (1000 * (${a} - ${_a:-0}) / (${t} - ${_t:-0}) + 5) / 10 ))
    ## Insert new value into file and rotate if necessary
    sed -i "${fl}" -n -e "\
	1 {
	    h
	    s:^.*$:${a} ${t} ${p}:p
	    g
	}
	1,${1:-$} p
	"
    ## Output values
    a=""; t=""; p=""	# reset values for file read
    while read _a _t _p			# for each line in file
    do
	[ -n "${a}" -a -n "${t}" -a -n "${p}" ] && {
	    # output the percentage
	    ${verbose-false} &&
		echo "cpu: (${a} - ${_a}) / (${t} - ${_t}) = ${p}" >&2
	    echo "${p}"
	    # only output ${1:-1} values
	    [ -n "${1}" ] ||
		break
	}
	# next set of values
	a="${_a}"; t="${_t}"; p="${_p}"
    done < "${fl}"
}

mem_usage () {
    # Function to get current memory usage, stores the current, and ${1:-inf} 
    # previous values in ${SHM_D}/mem; and outputs the current, and ${1:-0} 
    # from the file each call.
    ## Variables
    local mem a t p _a _t _p fl="${shm_d}/mem"
    # check the previous values (defaults if necessary)
    [ -f "${fl}" ] &&
	read a t p < "${fl}" ||
	echo "0 0 0" > "${fl}"
    ## Calculate current
    # get the total and active mem values from /proc/meminfo: ACTIVE|TOTAL
    mem="$(sed -n /proc/meminfo -e \
	':new
	N
	s/.*MemTotal:\s\+\([0-9]\+\)\+\s\+.*\nActive:\s\+\([0-9]\+\)\s\+.*$/\2|\1/p
	T new')"
    a="$(( ${mem%|*} / 1024 ))"		# Active memory (MB)
    t="$(( ${mem#*|} / 1024 ))"		# Active memory (MB)
    p=$(( (1000 * ${a} / ${t} + 5) / 10 ))	# percent used
    ## Insert new value into file and rotate if necessary
    sed -i "${fl}" -n -e "\
	1 {
	    h
	    s:^.*$:${a} ${t} ${p}:p
	    g
	}
	1,${1:-$} p
	"
    ## Output values
    a=""; t=""; p=""	# reset values for file read
    while read _a _t _p			# for each line in file
    do
	[ -n "${a}" -a -n "${t}" -a -n "${p}" ] && {
	    # output the percentage
	    ${verbose-false} &&
		echo "mem: ${a} / ${t} = ${p}" >&2
		echo "${p}"
	    # only output ${1:-1} values
	    [ -n "${1}" ] ||
		break
	}
	# next set of values
	a="${_a}"; t="${_t}"; p="${_p}"
    done < "${fl}"
}

while [ -n "${1}" ]
do
    [ -z "${1##--*}" ] &&
	opt_patt="--*=" ||
	opt_patt="-[a-z]"
    case "${1}" in
	-b|--blocks)
	    blocks=true
	    ;;
	-w|--words)
	    verbose=true
	    ;;
	-h*|--hist*|--history*)
	    [ "${1#${opt_patt}?}" = "${1}" ] &&
		shift
	    hist="${1#${opt_patt}}"
	    check_int ${hist} ||
		die "-h requires an integer argument"
	    ;;
	-n*|--num*|--number*)
	    [ "${1#${opt_patt}?}" = "${1}" ] &&
		shift
	    number="${1#${opt_patt}}"
	    check_int ${number} ||
		die "-n requires an integer argument"
	    ;;
	-v|--verb|--verbose)
	    verbose=true
	    ;;
	-s*|--sep*|--seperator*)
	    [ "${1#${opt_patt}?}" = "${1}" ] &&
		shift
	    sep_str="${1#${opt_patt}}"
	    ;;
	--start*)
	    [ "${1#${opt_patt}?}" = "${1}" ] &&
		shift
	    start_str="${1#${opt_patt}}"
	    ;;
	--end*)
	    [ "${1#${opt_patt}?}" = "${1}" ] &&
		shift
	    end_str="${1#${opt_patt}}"
	    ;;
	-c*|--fg-colour*)
	    [ "${1#${opt_patt}?}" = "${1}" ] &&
		shift
	    set_fg_colour "${1#${opt_patt}}"
	    ;;
	-k*|--bg-colour*)
	    [ "${1#${opt_patt}?}" = "${1}" ] &&
		shift
	    set_bg_colour "${1#${opt_patt}}"
	    ;;
	-a*|--attr*)
	    [ "${1#${opt_patt}?}" = "${1}" ] &&
		shift
	    set_attr "${1#${opt_patt}}"
	    ;;
	--cpu-c*|--cpu-fg-colour*)
	    [ "${1#${opt_patt}?}" = "${1}" ] &&
		shift
	    set_fg_colour "${1#${opt_patt}}" "cpu_"
	    ;;
	--cpu-k*|--cpu-bg-colour*)
	    [ "${1#${opt_patt}?}" = "${1}" ] &&
		shift
	    set_bg_colour "${1#${opt_patt}}" "cpu_"
	    ;;
	--cpu-a|--cpu-attr*)
	    [ "${1#${opt_patt}?}" = "${1}" ] &&
		shift
	    set_attr "${1#${opt_patt}}" "cpu_"
	    ;;
	--mem-c*|--mem-fg-colour*)
	    [ "${1#${opt_patt}?}" = "${1}" ] &&
		shift
	    set_fg_colour "${1#${opt_patt}}" "mem_"
	    ;;
	--mem-k*|--mem-bg-colour*)
	    [ "${1#${opt_patt}?}" = "${1}" ] &&
		shift
	    set_bg_colour "${1#${opt_patt}}" "mem_"
	    ;;
	--mem-a*|--mem-attr*)
	    [ "${1#${opt_patt}?}" = "${1}" ] &&
		shift
	    set_attr "${1#${opt_patt}}" "mem_"
	    ;;
	-h|-?|--help)
	    echo "usage: ${0} [-h N] [-n N] [-v] (-b|-w)"
	    echo
	    echo "Display the current cpu and memory usage figures."
	    echo "	-b, --blocks"
	    echo "		display using unicode block characters"
	    echo "	-w, --words"
	    echo "		display using alphanumeric characters"
	    echo "	-h N, --history=N"
	    echo "		show N historical values as well"
	    echo "	-n N, --number=N"
	    echo "		(-b only) display using blocks of width N"
	    echo "	-v, --verbose"
	    echo "		more verbose display"
	    echo "	-s STR, --seperator=STR"
	    echo "		string to seperate cpu and mem displays"
	    echo "	--(|cpu-|mem-)(c|k|a)=VAL,"
	    echo "	--(|cpu-|mem-)(fg-colour|bg-colour|attr)=VAL"
	    echo "		set the (normal|cpu|mem) output formating"
	    exit 0
    esac
    shift
done

cpu="$(cpu_usage ${hist})"
mem="$(mem_usage ${hist})"

if ${blocks-false}
then

    if [ ${hist-0} -gt 0 ] || [ ${number-1} -eq 1 ]
    then
	pc_block="pc_vblock"
    elif [ ${hist-1} -eq 1 ] && [ ${number-1} -gt 1 ]
    then
	pc_block="pc_hblock"
    else
	die "'-h ${hist}' can only be used with '-n 1'"
    fi

    cpu="$(${pc_block} ${cpu} ${number})"
    mem="$(${pc_block} ${mem} ${number})"
    sep_str="${sep_str}"	# default is no speration between blocks; 
				# assignmentneeded as use ${sep- } to add a 
				# space otherwise

fi

# Output representation
echo "\
${fmt}${start_str}\
${cpu_fmt}${cpu}\
${fmt}${sep_str- }\
${mem_fmt}${mem}\
${fmt}${end_str}\
"

