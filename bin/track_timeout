#!/bin/sh
# SCRIPTS_DIR/bin/track_timeout

# if DISPLAY is not set, then it's definitely not going to work
[ -n "$DISPLAY" ] || exit 1

[ -h "${0}" ] &&
    script_p="$(readlink -f "${0}")" ||
    script_p="${0}"
lib_d="${script_p%/*/*}/lib"
. "${lib_d}/get_prog.sh"
. "${lib_d}/notify.sh"

script_n="${script_p##*/}"
[ -t 1 ] || {   # if no stdout, then LOG
    LOG="$HOME/.log/$script_n.log"
    exec 2>&1 >>"$LOG"
    date "+%n%c%tStarting $script_n..."
}

screensaver_watch="$(first_cmd "xscreensaver-command -watch")" ||
    die "Cannot find watch command"
get_timeout() {
    local rcfile="$HOME/.xscreensaver"  # TODO generic
    while read option value rest;
    do
        case "$option" in
            timeout:)   # TODO generic
                echo "$value"
                return;;
        esac
    done <"$rcfile"
    return 1
}

fmt_plural() {  # count unit
    [ $1 -eq 1 ] && echo "$1 $2" || echo "$1 ${2}s"
}
fmt_list() {    # [item1 [item2[ ...itemN]]]
    local str="$1"
    while [ $# -gt 1 ]
    do  shift
        case $# in
            0)  break;;
            1)  str="$str and $1";;
            *)  str="$str, $1";;
        esac
    done
    echo "$str"
}


unix_time() {   # date string
    date "+%s" -d "$*"
}
secs_time() {   # hh:mm:ss string
    local h m s IFS="$IFS:"
    read h m s <<- _EOF
	$1
	_EOF
    echo $(( $h * 3600 + $m * 60 + $s ))
}
hms_time() {    # seconds
    [ $1 -gt 0 ] || {
        echo "0 seconds"
        return
    }
    local h=$(( $1 / 3600 )) m=$(( $1 / 60 % 60 )) s=$(( $1 % 60 ))
    set --
    [ $h -gt 0 ] && set -- "$@" "$(fmt_plural $h hour)"
    [ $m -gt 0 ] && set -- "$@" "$(fmt_plural $m minute)"
    [ $s -gt 0 ] && set -- "$@" "$(fmt_plural $s second)"
    fmt_list "$@"
}
def_time() {    # date string
    $verbose && date "+%c" -d "$*" || date "+%x %X" -d "$*"
}

while :
do
    $screensaver_watch | while read action time
    do
        case "$action" in
            BLANK|LOCK)
                blanked=$(unix_time "$time")
                timeout=$(secs_time "$(get_timeout)")
                idle=$(( $blanked - $timeout ))
                [ $idle -lt ${woken-0} ] && idle=$woken # in case it was forced
                unset blanked timeout;;
            UNBLANK)
                woken=$(unix_time "$time")
                [ -n "$idle" ] && {
                    duration=$(( $woken - $idle ))
                    show "Idle for $(hms_time $duration)" \
                        "$(def_time @$idle) -> $(def_time @$woken)"
                    unset idle duration
                };;
            *)
                info "Unknown Action:" "$action $time";;
        esac
    done
    {   ret=$?
        [ $ret -eq 130 ] ||     # INT
        [ $ret -eq 139 ] ||     # KILL
        [ $ret -eq 143 ]        # TERM
    } && break
done

